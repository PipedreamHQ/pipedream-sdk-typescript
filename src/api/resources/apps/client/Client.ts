/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Pipedream from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Apps {
    export interface Options {
        environment?: core.Supplier<environments.PipedreamEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        projectId: string;
        apiKey?: core.Supplier<string | undefined>;
        /** Override the x-pd-environment header */
        xPdEnvironment?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the x-pd-environment header */
        xPdEnvironment?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Apps {
    protected readonly _options: Apps.Options;

    constructor(_options: Apps.Options) {
        this._options = _options;
    }

    /**
     * @param {Pipedream.AppsListRequest} request
     * @param {Apps.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.apps.list()
     */
    public async list(
        request: Pipedream.AppsListRequest = {},
        requestOptions?: Apps.RequestOptions,
    ): Promise<core.Page<Pipedream.App>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (request: Pipedream.AppsListRequest): Promise<core.WithRawResponse<Pipedream.ListAppsResponse>> => {
                const {
                    after,
                    before,
                    limit,
                    q,
                    sort_key: sortKey,
                    sort_direction: sortDirection,
                    category_ids: categoryIds,
                } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (after != null) {
                    _queryParams["after"] = after;
                }
                if (before != null) {
                    _queryParams["before"] = before;
                }
                if (limit != null) {
                    _queryParams["limit"] = limit.toString();
                }
                if (q != null) {
                    _queryParams["q"] = q;
                }
                if (sortKey != null) {
                    _queryParams["sort_key"] = sortKey;
                }
                if (sortDirection != null) {
                    _queryParams["sort_direction"] = sortDirection;
                }
                if (categoryIds != null) {
                    if (Array.isArray(categoryIds)) {
                        _queryParams["category_ids"] = categoryIds.map((item) => item);
                    } else {
                        _queryParams["category_ids"] = categoryIds;
                    }
                }
                const _response = await core.fetcher({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)) ??
                            environments.PipedreamEnvironment.Prod,
                        "v1/connect/apps",
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({
                            "x-pd-environment": requestOptions?.xPdEnvironment,
                            ...(await this._getCustomAuthorizationHeaders()),
                        }),
                        requestOptions?.headers,
                    ),
                    queryParameters: _queryParams,
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return { data: _response.body as Pipedream.ListAppsResponse, rawResponse: _response.rawResponse };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.PipedreamError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.PipedreamError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.PipedreamTimeoutError("Timeout exceeded when calling GET /v1/connect/apps.");
                    case "unknown":
                        throw new errors.PipedreamError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<Pipedream.ListAppsResponse, Pipedream.App>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) =>
                response?.page_info?.end_cursor != null &&
                !(typeof response?.page_info?.end_cursor === "string" && response?.page_info?.end_cursor === ""),
            getItems: (response) => response?.data ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "after", response?.page_info?.end_cursor));
            },
        });
    }

    /**
     * @param {string} appId - The name slug or ID of the app (e.g., 'slack', 'github')
     * @param {Apps.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.apps.retrieve("app_id")
     */
    public retrieve(
        appId: string,
        requestOptions?: Apps.RequestOptions,
    ): core.HttpResponsePromise<Pipedream.GetAppResponse> {
        return core.HttpResponsePromise.fromPromise(this.__retrieve(appId, requestOptions));
    }

    private async __retrieve(
        appId: string,
        requestOptions?: Apps.RequestOptions,
    ): Promise<core.WithRawResponse<Pipedream.GetAppResponse>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PipedreamEnvironment.Prod,
                `v1/connect/apps/${encodeURIComponent(appId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    "x-pd-environment": requestOptions?.xPdEnvironment,
                    ...(await this._getCustomAuthorizationHeaders()),
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Pipedream.GetAppResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PipedreamError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PipedreamError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PipedreamTimeoutError("Timeout exceeded when calling GET /v1/connect/apps/{app_id}.");
            case "unknown":
                throw new errors.PipedreamError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { Authorization: apiKeyValue };
    }
}
