// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as core from "../../../../core/index.js";
import * as environments from "../../../../environments.js";
import * as errors from "../../../../errors/index.js";
import * as serializers from "../../../../serialization/index.js";
import type * as Pipedream from "../../../index.js";

export declare namespace Apps {
    export interface Options extends BaseClientOptions {
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    export interface RequestOptions extends BaseRequestOptions {}
}

export class Apps {
    protected readonly _options: Apps.Options;

    constructor(_options: Apps.Options) {
        this._options = _options;
    }

    /**
     * Retrieve all available apps with optional filtering and sorting
     *
     * @param {Pipedream.AppsListRequest} request
     * @param {Apps.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.apps.list({
     *         after: "after",
     *         before: "before",
     *         limit: 1,
     *         q: "q",
     *         sortKey: "name",
     *         sortDirection: "asc"
     *     })
     */
    public async list(
        request: Pipedream.AppsListRequest = {},
        requestOptions?: Apps.RequestOptions,
    ): Promise<core.Page<Pipedream.App>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (request: Pipedream.AppsListRequest): Promise<core.WithRawResponse<Pipedream.ListAppsResponse>> => {
                const { after, before, limit, q, sortKey, sortDirection, categoryIds } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (after != null) {
                    _queryParams.after = after;
                }
                if (before != null) {
                    _queryParams.before = before;
                }
                if (limit != null) {
                    _queryParams.limit = limit.toString();
                }
                if (q != null) {
                    _queryParams.q = q;
                }
                if (sortKey != null) {
                    _queryParams.sort_key = serializers.AppsListRequestSortKey.jsonOrThrow(sortKey, {
                        unrecognizedObjectKeys: "strip",
                        omitUndefined: true,
                    });
                }
                if (sortDirection != null) {
                    _queryParams.sort_direction = serializers.AppsListRequestSortDirection.jsonOrThrow(sortDirection, {
                        unrecognizedObjectKeys: "strip",
                        omitUndefined: true,
                    });
                }
                if (categoryIds != null) {
                    if (Array.isArray(categoryIds)) {
                        _queryParams.category_ids = categoryIds.map((item) => item);
                    } else {
                        _queryParams.category_ids = categoryIds;
                    }
                }
                const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
                    this._options?.headers,
                    mergeOnlyDefinedHeaders({
                        Authorization: await this._getAuthorizationHeader(),
                        "x-pd-environment": requestOptions?.projectEnvironment ?? this._options?.projectEnvironment,
                    }),
                    requestOptions?.headers,
                );
                const _response = await core.fetcher({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)) ??
                            environments.PipedreamEnvironment.Prod,
                        "v1/connect/apps",
                    ),
                    method: "GET",
                    headers: _headers,
                    queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
                    timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
                    maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: serializers.ListAppsResponse.parseOrThrow(_response.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.PipedreamError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.PipedreamError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.PipedreamTimeoutError("Timeout exceeded when calling GET /v1/connect/apps.");
                    case "unknown":
                        throw new errors.PipedreamError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<Pipedream.ListAppsResponse, Pipedream.App>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) =>
                response?.pageInfo.endCursor != null &&
                !(typeof response?.pageInfo.endCursor === "string" && response?.pageInfo.endCursor === ""),
            getItems: (response) => response?.data ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "after", response?.pageInfo.endCursor));
            },
        });
    }

    /**
     * Get detailed information about a specific app by ID or name slug
     *
     * @param {string} appId - The name slug or ID of the app (e.g., 'slack', 'github')
     * @param {Apps.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.apps.retrieve("app_id")
     */
    public retrieve(
        appId: string,
        requestOptions?: Apps.RequestOptions,
    ): core.HttpResponsePromise<Pipedream.GetAppResponse> {
        return core.HttpResponsePromise.fromPromise(this.__retrieve(appId, requestOptions));
    }

    private async __retrieve(
        appId: string,
        requestOptions?: Apps.RequestOptions,
    ): Promise<core.WithRawResponse<Pipedream.GetAppResponse>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-pd-environment": requestOptions?.projectEnvironment ?? this._options?.projectEnvironment,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PipedreamEnvironment.Prod,
                `v1/connect/apps/${core.url.encodePathParam(appId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.GetAppResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PipedreamError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PipedreamError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PipedreamTimeoutError("Timeout exceeded when calling GET /v1/connect/apps/{app_id}.");
            case "unknown":
                throw new errors.PipedreamError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
