/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Pipedream from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as serializers from "../../../../serialization/index.js";
import * as errors from "../../../../errors/index.js";

export declare namespace DeployedTriggers {
    export interface Options {
        environment?: core.Supplier<environments.PipedreamEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        projectId: string;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the x-pd-environment header */
        projectEnvironment?: core.Supplier<Pipedream.ProjectEnvironment | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the x-pd-environment header */
        projectEnvironment?: Pipedream.ProjectEnvironment | undefined;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class DeployedTriggers {
    protected readonly _options: DeployedTriggers.Options;

    constructor(_options: DeployedTriggers.Options) {
        this._options = _options;
    }

    /**
     * Retrieve all deployed triggers for a specific external user
     *
     * @param {Pipedream.DeployedTriggersListRequest} request
     * @param {DeployedTriggers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.deployedTriggers.list({
     *         externalUserId: "external_user_id"
     *     })
     */
    public async list(
        request: Pipedream.DeployedTriggersListRequest,
        requestOptions?: DeployedTriggers.RequestOptions,
    ): Promise<core.Page<Pipedream.DeployedComponent>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: Pipedream.DeployedTriggersListRequest,
            ): Promise<core.WithRawResponse<Pipedream.GetTriggersResponse>> => {
                const { after, before, limit, externalUserId } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (after != null) {
                    _queryParams["after"] = after;
                }
                if (before != null) {
                    _queryParams["before"] = before;
                }
                if (limit != null) {
                    _queryParams["limit"] = limit.toString();
                }
                _queryParams["external_user_id"] = externalUserId;
                var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
                    this._options?.headers,
                    mergeOnlyDefinedHeaders({
                        Authorization: await this._getAuthorizationHeader(),
                        "x-pd-environment": requestOptions?.projectEnvironment,
                    }),
                    requestOptions?.headers,
                );
                const _response = await core.fetcher({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)) ??
                            environments.PipedreamEnvironment.Prod,
                        `v1/connect/${encodeURIComponent(this._options.projectId)}/deployed-triggers`,
                    ),
                    method: "GET",
                    headers: _headers,
                    queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: serializers.GetTriggersResponse.parseOrThrow(_response.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.PipedreamError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.PipedreamError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.PipedreamTimeoutError(
                            "Timeout exceeded when calling GET /v1/connect/{project_id}/deployed-triggers.",
                        );
                    case "unknown":
                        throw new errors.PipedreamError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<Pipedream.GetTriggersResponse, Pipedream.DeployedComponent>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) =>
                response?.pageInfo?.endCursor != null &&
                !(typeof response?.pageInfo?.endCursor === "string" && response?.pageInfo?.endCursor === ""),
            getItems: (response) => response?.data ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "after", response?.pageInfo?.endCursor));
            },
        });
    }

    /**
     * Get details of a specific deployed trigger by its ID
     *
     * @param {string} triggerId
     * @param {Pipedream.DeployedTriggersRetrieveRequest} request
     * @param {DeployedTriggers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.deployedTriggers.retrieve("trigger_id", {
     *         externalUserId: "external_user_id"
     *     })
     */
    public retrieve(
        triggerId: string,
        request: Pipedream.DeployedTriggersRetrieveRequest,
        requestOptions?: DeployedTriggers.RequestOptions,
    ): core.HttpResponsePromise<Pipedream.GetTriggerResponse> {
        return core.HttpResponsePromise.fromPromise(this.__retrieve(triggerId, request, requestOptions));
    }

    private async __retrieve(
        triggerId: string,
        request: Pipedream.DeployedTriggersRetrieveRequest,
        requestOptions?: DeployedTriggers.RequestOptions,
    ): Promise<core.WithRawResponse<Pipedream.GetTriggerResponse>> {
        const { externalUserId } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["external_user_id"] = externalUserId;
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-pd-environment": requestOptions?.projectEnvironment,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PipedreamEnvironment.Prod,
                `v1/connect/${encodeURIComponent(this._options.projectId)}/deployed-triggers/${encodeURIComponent(triggerId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.GetTriggerResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PipedreamError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PipedreamError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PipedreamTimeoutError(
                    "Timeout exceeded when calling GET /v1/connect/{project_id}/deployed-triggers/{trigger_id}.",
                );
            case "unknown":
                throw new errors.PipedreamError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Modify the configuration of a deployed trigger, including active status
     *
     * @param {string} triggerId
     * @param {Pipedream.UpdateTriggerOpts} request
     * @param {DeployedTriggers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.deployedTriggers.update("trigger_id", {
     *         externalUserId: "external_user_id"
     *     })
     */
    public update(
        triggerId: string,
        request: Pipedream.UpdateTriggerOpts,
        requestOptions?: DeployedTriggers.RequestOptions,
    ): core.HttpResponsePromise<Pipedream.GetTriggerResponse> {
        return core.HttpResponsePromise.fromPromise(this.__update(triggerId, request, requestOptions));
    }

    private async __update(
        triggerId: string,
        request: Pipedream.UpdateTriggerOpts,
        requestOptions?: DeployedTriggers.RequestOptions,
    ): Promise<core.WithRawResponse<Pipedream.GetTriggerResponse>> {
        const { externalUserId, ..._body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["external_user_id"] = externalUserId;
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-pd-environment": requestOptions?.projectEnvironment,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PipedreamEnvironment.Prod,
                `v1/connect/${encodeURIComponent(this._options.projectId)}/deployed-triggers/${encodeURIComponent(triggerId)}`,
            ),
            method: "PUT",
            headers: _headers,
            contentType: "application/json",
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            requestType: "json",
            body: serializers.UpdateTriggerOpts.jsonOrThrow(_body, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.GetTriggerResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PipedreamError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PipedreamError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PipedreamTimeoutError(
                    "Timeout exceeded when calling PUT /v1/connect/{project_id}/deployed-triggers/{trigger_id}.",
                );
            case "unknown":
                throw new errors.PipedreamError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Remove a deployed trigger and stop receiving events
     *
     * @param {string} triggerId
     * @param {Pipedream.DeployedTriggersDeleteRequest} request
     * @param {DeployedTriggers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.deployedTriggers.delete("trigger_id", {
     *         externalUserId: "external_user_id"
     *     })
     */
    public delete(
        triggerId: string,
        request: Pipedream.DeployedTriggersDeleteRequest,
        requestOptions?: DeployedTriggers.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__delete(triggerId, request, requestOptions));
    }

    private async __delete(
        triggerId: string,
        request: Pipedream.DeployedTriggersDeleteRequest,
        requestOptions?: DeployedTriggers.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const { externalUserId, ignoreHookErrors } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["external_user_id"] = externalUserId;
        if (ignoreHookErrors != null) {
            _queryParams["ignore_hook_errors"] = ignoreHookErrors.toString();
        }

        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-pd-environment": requestOptions?.projectEnvironment,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PipedreamEnvironment.Prod,
                `v1/connect/${encodeURIComponent(this._options.projectId)}/deployed-triggers/${encodeURIComponent(triggerId)}`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PipedreamError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PipedreamError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PipedreamTimeoutError(
                    "Timeout exceeded when calling DELETE /v1/connect/{project_id}/deployed-triggers/{trigger_id}.",
                );
            case "unknown":
                throw new errors.PipedreamError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve recent events emitted by a deployed trigger
     *
     * @param {string} triggerId
     * @param {Pipedream.DeployedTriggersListEventsRequest} request
     * @param {DeployedTriggers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.deployedTriggers.listEvents("trigger_id", {
     *         externalUserId: "external_user_id"
     *     })
     */
    public listEvents(
        triggerId: string,
        request: Pipedream.DeployedTriggersListEventsRequest,
        requestOptions?: DeployedTriggers.RequestOptions,
    ): core.HttpResponsePromise<Pipedream.GetTriggerEventsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__listEvents(triggerId, request, requestOptions));
    }

    private async __listEvents(
        triggerId: string,
        request: Pipedream.DeployedTriggersListEventsRequest,
        requestOptions?: DeployedTriggers.RequestOptions,
    ): Promise<core.WithRawResponse<Pipedream.GetTriggerEventsResponse>> {
        const { externalUserId, n } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["external_user_id"] = externalUserId;
        if (n != null) {
            _queryParams["n"] = n.toString();
        }

        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-pd-environment": requestOptions?.projectEnvironment,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PipedreamEnvironment.Prod,
                `v1/connect/${encodeURIComponent(this._options.projectId)}/deployed-triggers/${encodeURIComponent(triggerId)}/events`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.GetTriggerEventsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PipedreamError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PipedreamError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PipedreamTimeoutError(
                    "Timeout exceeded when calling GET /v1/connect/{project_id}/deployed-triggers/{trigger_id}/events.",
                );
            case "unknown":
                throw new errors.PipedreamError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get workflows connected to receive events from this trigger
     *
     * @param {string} triggerId
     * @param {Pipedream.DeployedTriggersListWorkflowsRequest} request
     * @param {DeployedTriggers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.deployedTriggers.listWorkflows("trigger_id", {
     *         externalUserId: "external_user_id"
     *     })
     */
    public listWorkflows(
        triggerId: string,
        request: Pipedream.DeployedTriggersListWorkflowsRequest,
        requestOptions?: DeployedTriggers.RequestOptions,
    ): core.HttpResponsePromise<Pipedream.GetTriggerWorkflowsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__listWorkflows(triggerId, request, requestOptions));
    }

    private async __listWorkflows(
        triggerId: string,
        request: Pipedream.DeployedTriggersListWorkflowsRequest,
        requestOptions?: DeployedTriggers.RequestOptions,
    ): Promise<core.WithRawResponse<Pipedream.GetTriggerWorkflowsResponse>> {
        const { externalUserId } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["external_user_id"] = externalUserId;
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-pd-environment": requestOptions?.projectEnvironment,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PipedreamEnvironment.Prod,
                `v1/connect/${encodeURIComponent(this._options.projectId)}/deployed-triggers/${encodeURIComponent(triggerId)}/pipelines`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.GetTriggerWorkflowsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PipedreamError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PipedreamError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PipedreamTimeoutError(
                    "Timeout exceeded when calling GET /v1/connect/{project_id}/deployed-triggers/{trigger_id}/pipelines.",
                );
            case "unknown":
                throw new errors.PipedreamError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Connect or disconnect workflows to receive trigger events
     *
     * @param {string} triggerId
     * @param {Pipedream.UpdateTriggerWorkflowsOpts} request
     * @param {DeployedTriggers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.deployedTriggers.updateWorkflows("trigger_id", {
     *         externalUserId: "external_user_id",
     *         workflowIds: ["workflow_ids"]
     *     })
     */
    public updateWorkflows(
        triggerId: string,
        request: Pipedream.UpdateTriggerWorkflowsOpts,
        requestOptions?: DeployedTriggers.RequestOptions,
    ): core.HttpResponsePromise<Pipedream.GetTriggerWorkflowsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__updateWorkflows(triggerId, request, requestOptions));
    }

    private async __updateWorkflows(
        triggerId: string,
        request: Pipedream.UpdateTriggerWorkflowsOpts,
        requestOptions?: DeployedTriggers.RequestOptions,
    ): Promise<core.WithRawResponse<Pipedream.GetTriggerWorkflowsResponse>> {
        const { externalUserId, ..._body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["external_user_id"] = externalUserId;
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-pd-environment": requestOptions?.projectEnvironment,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PipedreamEnvironment.Prod,
                `v1/connect/${encodeURIComponent(this._options.projectId)}/deployed-triggers/${encodeURIComponent(triggerId)}/pipelines`,
            ),
            method: "PUT",
            headers: _headers,
            contentType: "application/json",
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            requestType: "json",
            body: serializers.UpdateTriggerWorkflowsOpts.jsonOrThrow(_body, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.GetTriggerWorkflowsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PipedreamError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PipedreamError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PipedreamTimeoutError(
                    "Timeout exceeded when calling PUT /v1/connect/{project_id}/deployed-triggers/{trigger_id}/pipelines.",
                );
            case "unknown":
                throw new errors.PipedreamError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get webhook URLs configured to receive trigger events
     *
     * @param {string} triggerId
     * @param {Pipedream.DeployedTriggersListWebhooksRequest} request
     * @param {DeployedTriggers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.deployedTriggers.listWebhooks("trigger_id", {
     *         externalUserId: "external_user_id"
     *     })
     */
    public listWebhooks(
        triggerId: string,
        request: Pipedream.DeployedTriggersListWebhooksRequest,
        requestOptions?: DeployedTriggers.RequestOptions,
    ): core.HttpResponsePromise<Pipedream.GetTriggerWebhooksResponse> {
        return core.HttpResponsePromise.fromPromise(this.__listWebhooks(triggerId, request, requestOptions));
    }

    private async __listWebhooks(
        triggerId: string,
        request: Pipedream.DeployedTriggersListWebhooksRequest,
        requestOptions?: DeployedTriggers.RequestOptions,
    ): Promise<core.WithRawResponse<Pipedream.GetTriggerWebhooksResponse>> {
        const { externalUserId } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["external_user_id"] = externalUserId;
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-pd-environment": requestOptions?.projectEnvironment,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PipedreamEnvironment.Prod,
                `v1/connect/${encodeURIComponent(this._options.projectId)}/deployed-triggers/${encodeURIComponent(triggerId)}/webhooks`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.GetTriggerWebhooksResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PipedreamError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PipedreamError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PipedreamTimeoutError(
                    "Timeout exceeded when calling GET /v1/connect/{project_id}/deployed-triggers/{trigger_id}/webhooks.",
                );
            case "unknown":
                throw new errors.PipedreamError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Configure webhook URLs to receive trigger events
     *
     * @param {string} triggerId
     * @param {Pipedream.UpdateTriggerWebhooksOpts} request
     * @param {DeployedTriggers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.deployedTriggers.updateWebhooks("trigger_id", {
     *         externalUserId: "external_user_id",
     *         webhookUrls: ["webhook_urls"]
     *     })
     */
    public updateWebhooks(
        triggerId: string,
        request: Pipedream.UpdateTriggerWebhooksOpts,
        requestOptions?: DeployedTriggers.RequestOptions,
    ): core.HttpResponsePromise<Pipedream.GetTriggerWebhooksResponse> {
        return core.HttpResponsePromise.fromPromise(this.__updateWebhooks(triggerId, request, requestOptions));
    }

    private async __updateWebhooks(
        triggerId: string,
        request: Pipedream.UpdateTriggerWebhooksOpts,
        requestOptions?: DeployedTriggers.RequestOptions,
    ): Promise<core.WithRawResponse<Pipedream.GetTriggerWebhooksResponse>> {
        const { externalUserId, ..._body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["external_user_id"] = externalUserId;
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-pd-environment": requestOptions?.projectEnvironment,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PipedreamEnvironment.Prod,
                `v1/connect/${encodeURIComponent(this._options.projectId)}/deployed-triggers/${encodeURIComponent(triggerId)}/webhooks`,
            ),
            method: "PUT",
            headers: _headers,
            contentType: "application/json",
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            requestType: "json",
            body: serializers.UpdateTriggerWebhooksOpts.jsonOrThrow(_body, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.GetTriggerWebhooksResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PipedreamError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PipedreamError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PipedreamTimeoutError(
                    "Timeout exceeded when calling PUT /v1/connect/{project_id}/deployed-triggers/{trigger_id}/webhooks.",
                );
            case "unknown":
                throw new errors.PipedreamError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
