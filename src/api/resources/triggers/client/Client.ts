/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Pipedream from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as serializers from "../../../../serialization/index.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Triggers {
    export interface Options {
        environment?: core.Supplier<environments.PipedreamEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        projectId: string;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the x-pd-environment header */
        projectEnvironment?: core.Supplier<Pipedream.ProjectEnvironment | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the x-pd-environment header */
        projectEnvironment?: Pipedream.ProjectEnvironment | undefined;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Triggers {
    protected readonly _options: Triggers.Options;

    constructor(_options: Triggers.Options) {
        this._options = _options;
    }

    /**
     * @param {Pipedream.TriggersListRequest} request
     * @param {Triggers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.triggers.list()
     */
    public async list(
        request: Pipedream.TriggersListRequest = {},
        requestOptions?: Triggers.RequestOptions,
    ): Promise<core.Page<Pipedream.Component>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: Pipedream.TriggersListRequest,
            ): Promise<core.WithRawResponse<Pipedream.GetComponentsResponse>> => {
                const { after, before, limit, q, app } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (after != null) {
                    _queryParams["after"] = after;
                }
                if (before != null) {
                    _queryParams["before"] = before;
                }
                if (limit != null) {
                    _queryParams["limit"] = limit.toString();
                }
                if (q != null) {
                    _queryParams["q"] = q;
                }
                if (app != null) {
                    _queryParams["app"] = app;
                }
                const _response = await core.fetcher({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)) ??
                            environments.PipedreamEnvironment.Prod,
                        `v1/connect/${encodeURIComponent(this._options.projectId)}/triggers`,
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({
                            Authorization: await this._getAuthorizationHeader(),
                            "x-pd-environment": requestOptions?.projectEnvironment,
                        }),
                        requestOptions?.headers,
                    ),
                    queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: serializers.GetComponentsResponse.parseOrThrow(_response.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.PipedreamError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.PipedreamError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.PipedreamTimeoutError(
                            "Timeout exceeded when calling GET /v1/connect/{project_id}/triggers.",
                        );
                    case "unknown":
                        throw new errors.PipedreamError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<Pipedream.GetComponentsResponse, Pipedream.Component>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) =>
                response?.pageInfo?.endCursor != null &&
                !(typeof response?.pageInfo?.endCursor === "string" && response?.pageInfo?.endCursor === ""),
            getItems: (response) => response?.data ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "after", response?.pageInfo?.endCursor));
            },
        });
    }

    /**
     * @param {string} componentId - The key that uniquely identifies the component (e.g., 'slack-send-message')
     * @param {Triggers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.triggers.retrieve("component_id")
     */
    public retrieve(
        componentId: string,
        requestOptions?: Triggers.RequestOptions,
    ): core.HttpResponsePromise<Pipedream.GetComponentResponse> {
        return core.HttpResponsePromise.fromPromise(this.__retrieve(componentId, requestOptions));
    }

    private async __retrieve(
        componentId: string,
        requestOptions?: Triggers.RequestOptions,
    ): Promise<core.WithRawResponse<Pipedream.GetComponentResponse>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PipedreamEnvironment.Prod,
                `v1/connect/${encodeURIComponent(this._options.projectId)}/triggers/${encodeURIComponent(componentId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "x-pd-environment": requestOptions?.projectEnvironment,
                }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.GetComponentResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PipedreamError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PipedreamError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PipedreamTimeoutError(
                    "Timeout exceeded when calling GET /v1/connect/{project_id}/triggers/{component_id}.",
                );
            case "unknown":
                throw new errors.PipedreamError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Pipedream.ConfigurePropOpts} request
     * @param {Triggers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.triggers.configureProp({
     *         id: "id",
     *         externalUserId: "external_user_id",
     *         propName: "prop_name"
     *     })
     */
    public configureProp(
        request: Pipedream.ConfigurePropOpts,
        requestOptions?: Triggers.RequestOptions,
    ): core.HttpResponsePromise<Pipedream.ConfigurePropResponse> {
        return core.HttpResponsePromise.fromPromise(this.__configureProp(request, requestOptions));
    }

    private async __configureProp(
        request: Pipedream.ConfigurePropOpts,
        requestOptions?: Triggers.RequestOptions,
    ): Promise<core.WithRawResponse<Pipedream.ConfigurePropResponse>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PipedreamEnvironment.Prod,
                `v1/connect/${encodeURIComponent(this._options.projectId)}/triggers/configure`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "x-pd-environment": requestOptions?.projectEnvironment,
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.ConfigurePropOpts.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ConfigurePropResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PipedreamError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PipedreamError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PipedreamTimeoutError(
                    "Timeout exceeded when calling POST /v1/connect/{project_id}/triggers/configure.",
                );
            case "unknown":
                throw new errors.PipedreamError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Pipedream.ReloadPropsOpts} request
     * @param {Triggers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.triggers.reloadProps({
     *         id: "id",
     *         externalUserId: "external_user_id"
     *     })
     */
    public reloadProps(
        request: Pipedream.ReloadPropsOpts,
        requestOptions?: Triggers.RequestOptions,
    ): core.HttpResponsePromise<Pipedream.ReloadPropsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__reloadProps(request, requestOptions));
    }

    private async __reloadProps(
        request: Pipedream.ReloadPropsOpts,
        requestOptions?: Triggers.RequestOptions,
    ): Promise<core.WithRawResponse<Pipedream.ReloadPropsResponse>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PipedreamEnvironment.Prod,
                `v1/connect/${encodeURIComponent(this._options.projectId)}/triggers/props`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "x-pd-environment": requestOptions?.projectEnvironment,
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.ReloadPropsOpts.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ReloadPropsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PipedreamError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PipedreamError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PipedreamTimeoutError(
                    "Timeout exceeded when calling POST /v1/connect/{project_id}/triggers/props.",
                );
            case "unknown":
                throw new errors.PipedreamError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Pipedream.DeployTriggerOpts} request
     * @param {Triggers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.triggers.deploy({
     *         id: "id",
     *         externalUserId: "external_user_id"
     *     })
     */
    public deploy(
        request: Pipedream.DeployTriggerOpts,
        requestOptions?: Triggers.RequestOptions,
    ): core.HttpResponsePromise<Pipedream.DeployTriggerResponse> {
        return core.HttpResponsePromise.fromPromise(this.__deploy(request, requestOptions));
    }

    private async __deploy(
        request: Pipedream.DeployTriggerOpts,
        requestOptions?: Triggers.RequestOptions,
    ): Promise<core.WithRawResponse<Pipedream.DeployTriggerResponse>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PipedreamEnvironment.Prod,
                `v1/connect/${encodeURIComponent(this._options.projectId)}/triggers/deploy`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "x-pd-environment": requestOptions?.projectEnvironment,
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.DeployTriggerOpts.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.DeployTriggerResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PipedreamError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PipedreamError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PipedreamTimeoutError(
                    "Timeout exceeded when calling POST /v1/connect/{project_id}/triggers/deploy.",
                );
            case "unknown":
                throw new errors.PipedreamError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
