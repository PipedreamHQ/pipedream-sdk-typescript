// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as core from "../../../../core/index.js";
import * as environments from "../../../../environments.js";
import * as errors from "../../../../errors/index.js";
import * as serializers from "../../../../serialization/index.js";
import * as Pipedream from "../../../index.js";

export declare namespace Components {
    export interface Options extends BaseClientOptions {
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    export interface RequestOptions extends BaseRequestOptions {}
}

export class Components {
    protected readonly _options: Components.Options;

    constructor(_options: Components.Options) {
        this._options = _options;
    }

    /**
     * Retrieve available components with optional search and app filtering
     *
     * @param {Pipedream.ComponentsListRequest} request
     * @param {Components.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Pipedream.TooManyRequestsError}
     *
     * @example
     *     await client.components.list({
     *         after: "after",
     *         before: "before",
     *         limit: 1,
     *         q: "q",
     *         app: "app",
     *         componentType: "trigger"
     *     })
     */
    public async list(
        request: Pipedream.ComponentsListRequest = {},
        requestOptions?: Components.RequestOptions,
    ): Promise<core.Page<Pipedream.Component>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: Pipedream.ComponentsListRequest,
            ): Promise<core.WithRawResponse<Pipedream.GetComponentsResponse>> => {
                const { after, before, limit, q, app, componentType } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (after != null) {
                    _queryParams.after = after;
                }
                if (before != null) {
                    _queryParams.before = before;
                }
                if (limit != null) {
                    _queryParams.limit = limit.toString();
                }
                if (q != null) {
                    _queryParams.q = q;
                }
                if (app != null) {
                    _queryParams.app = app;
                }
                if (componentType != null) {
                    _queryParams.component_type = serializers.ComponentType.jsonOrThrow(componentType, {
                        unrecognizedObjectKeys: "strip",
                        omitUndefined: true,
                    });
                }
                const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
                    this._options?.headers,
                    mergeOnlyDefinedHeaders({
                        Authorization: await this._getAuthorizationHeader(),
                        "x-pd-environment": requestOptions?.projectEnvironment ?? this._options?.projectEnvironment,
                    }),
                    requestOptions?.headers,
                );
                const _response = await core.fetcher({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)) ??
                            environments.PipedreamEnvironment.Prod,
                        `v1/connect/${core.url.encodePathParam(this._options.projectId)}/components`,
                    ),
                    method: "GET",
                    headers: _headers,
                    queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
                    timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
                    maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: serializers.GetComponentsResponse.parseOrThrow(_response.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 429:
                            throw new Pipedream.TooManyRequestsError(_response.error.body, _response.rawResponse);
                        default:
                            throw new errors.PipedreamError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                                rawResponse: _response.rawResponse,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.PipedreamError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.PipedreamTimeoutError(
                            "Timeout exceeded when calling GET /v1/connect/{project_id}/components.",
                        );
                    case "unknown":
                        throw new errors.PipedreamError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<Pipedream.GetComponentsResponse, Pipedream.Component>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) =>
                response?.pageInfo.endCursor != null &&
                !(typeof response?.pageInfo.endCursor === "string" && response?.pageInfo.endCursor === ""),
            getItems: (response) => response?.data ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "after", response?.pageInfo.endCursor));
            },
        });
    }

    /**
     * Get detailed configuration for a specific component by its key
     *
     * @param {string} componentId - The key that uniquely identifies the component (e.g., 'slack-send-message')
     * @param {Components.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Pipedream.TooManyRequestsError}
     *
     * @example
     *     await client.components.retrieve("component_id")
     */
    public retrieve(
        componentId: string,
        requestOptions?: Components.RequestOptions,
    ): core.HttpResponsePromise<Pipedream.GetComponentResponse> {
        return core.HttpResponsePromise.fromPromise(this.__retrieve(componentId, requestOptions));
    }

    private async __retrieve(
        componentId: string,
        requestOptions?: Components.RequestOptions,
    ): Promise<core.WithRawResponse<Pipedream.GetComponentResponse>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-pd-environment": requestOptions?.projectEnvironment ?? this._options?.projectEnvironment,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PipedreamEnvironment.Prod,
                `v1/connect/${core.url.encodePathParam(this._options.projectId)}/components/${core.url.encodePathParam(componentId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.GetComponentResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 429:
                    throw new Pipedream.TooManyRequestsError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.PipedreamError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PipedreamError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PipedreamTimeoutError(
                    "Timeout exceeded when calling GET /v1/connect/{project_id}/components/{component_id}.",
                );
            case "unknown":
                throw new errors.PipedreamError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve remote options for a given prop for a component
     *
     * @param {Pipedream.ConfigurePropOpts} request
     * @param {Components.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Pipedream.TooManyRequestsError}
     *
     * @example
     *     await client.components.configureProp({
     *         id: "id",
     *         externalUserId: "external_user_id",
     *         propName: "prop_name"
     *     })
     */
    public configureProp(
        request: Pipedream.ConfigurePropOpts,
        requestOptions?: Components.RequestOptions,
    ): core.HttpResponsePromise<Pipedream.ConfigurePropResponse> {
        return core.HttpResponsePromise.fromPromise(this.__configureProp(request, requestOptions));
    }

    private async __configureProp(
        request: Pipedream.ConfigurePropOpts,
        requestOptions?: Components.RequestOptions,
    ): Promise<core.WithRawResponse<Pipedream.ConfigurePropResponse>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-pd-environment": requestOptions?.projectEnvironment ?? this._options?.projectEnvironment,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PipedreamEnvironment.Prod,
                `v1/connect/${core.url.encodePathParam(this._options.projectId)}/components/configure`,
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.ConfigurePropOpts.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ConfigurePropResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 429:
                    throw new Pipedream.TooManyRequestsError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.PipedreamError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PipedreamError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PipedreamTimeoutError(
                    "Timeout exceeded when calling POST /v1/connect/{project_id}/components/configure.",
                );
            case "unknown":
                throw new errors.PipedreamError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Reload the prop definition based on the currently configured props
     *
     * @param {Pipedream.ReloadPropsOpts} request
     * @param {Components.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Pipedream.TooManyRequestsError}
     *
     * @example
     *     await client.components.reloadProps({
     *         id: "id",
     *         externalUserId: "external_user_id"
     *     })
     */
    public reloadProps(
        request: Pipedream.ReloadPropsOpts,
        requestOptions?: Components.RequestOptions,
    ): core.HttpResponsePromise<Pipedream.ReloadPropsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__reloadProps(request, requestOptions));
    }

    private async __reloadProps(
        request: Pipedream.ReloadPropsOpts,
        requestOptions?: Components.RequestOptions,
    ): Promise<core.WithRawResponse<Pipedream.ReloadPropsResponse>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-pd-environment": requestOptions?.projectEnvironment ?? this._options?.projectEnvironment,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PipedreamEnvironment.Prod,
                `v1/connect/${core.url.encodePathParam(this._options.projectId)}/components/props`,
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.ReloadPropsOpts.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ReloadPropsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 429:
                    throw new Pipedream.TooManyRequestsError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.PipedreamError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PipedreamError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PipedreamTimeoutError(
                    "Timeout exceeded when calling POST /v1/connect/{project_id}/components/props.",
                );
            case "unknown":
                throw new errors.PipedreamError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
