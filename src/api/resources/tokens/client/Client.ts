// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as core from "../../../../core/index.js";
import * as environments from "../../../../environments.js";
import * as errors from "../../../../errors/index.js";
import * as serializers from "../../../../serialization/index.js";
import * as Pipedream from "../../../index.js";

export declare namespace Tokens {
    export interface Options extends BaseClientOptions {
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    export interface RequestOptions extends BaseRequestOptions {}
}

export class Tokens {
    protected readonly _options: Tokens.Options;

    constructor(_options: Tokens.Options) {
        this._options = _options;
    }

    /**
     * Generate a Connect token to use for client-side authentication
     *
     * @param {Pipedream.CreateTokenOpts} request
     * @param {Tokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Pipedream.TooManyRequestsError}
     *
     * @example
     *     await client.tokens.create({
     *         externalUserId: "external_user_id"
     *     })
     */
    public create(
        request: Pipedream.CreateTokenOpts,
        requestOptions?: Tokens.RequestOptions,
    ): core.HttpResponsePromise<Pipedream.CreateTokenResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Pipedream.CreateTokenOpts,
        requestOptions?: Tokens.RequestOptions,
    ): Promise<core.WithRawResponse<Pipedream.CreateTokenResponse>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-pd-environment": requestOptions?.projectEnvironment ?? this._options?.projectEnvironment,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PipedreamEnvironment.Prod,
                `v1/connect/${core.url.encodePathParam(this._options.projectId)}/tokens`,
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: serializers.CreateTokenOpts.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.CreateTokenResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 429:
                    throw new Pipedream.TooManyRequestsError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.PipedreamError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PipedreamError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PipedreamTimeoutError(
                    "Timeout exceeded when calling POST /v1/connect/{project_id}/tokens.",
                );
            case "unknown":
                throw new errors.PipedreamError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Confirm the validity of a Connect token
     *
     * @param {Pipedream.ConnectToken} ctok
     * @param {Pipedream.TokensValidateRequest} request
     * @param {Tokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Pipedream.TooManyRequestsError}
     *
     * @example
     *     await client.tokens.validate("ctok", {
     *         appId: "app_id",
     *         oauthAppId: "oauth_app_id"
     *     })
     */
    public validate(
        ctok: Pipedream.ConnectToken,
        request: Pipedream.TokensValidateRequest,
        requestOptions?: Tokens.RequestOptions,
    ): core.HttpResponsePromise<Pipedream.ValidateTokenResponse> {
        return core.HttpResponsePromise.fromPromise(this.__validate(ctok, request, requestOptions));
    }

    private async __validate(
        ctok: Pipedream.ConnectToken,
        request: Pipedream.TokensValidateRequest,
        requestOptions?: Tokens.RequestOptions,
    ): Promise<core.WithRawResponse<Pipedream.ValidateTokenResponse>> {
        const { appId, oauthAppId } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams.app_id = appId;
        if (oauthAppId != null) {
            _queryParams.oauth_app_id = oauthAppId;
        }

        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-pd-environment": requestOptions?.projectEnvironment ?? this._options?.projectEnvironment,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PipedreamEnvironment.Prod,
                `v1/connect/tokens/${core.url.encodePathParam(serializers.ConnectToken.jsonOrThrow(ctok, { omitUndefined: true }))}/validate`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ValidateTokenResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 429:
                    throw new Pipedream.TooManyRequestsError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.PipedreamError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PipedreamError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PipedreamTimeoutError(
                    "Timeout exceeded when calling GET /v1/connect/tokens/{ctok}/validate.",
                );
            case "unknown":
                throw new errors.PipedreamError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
