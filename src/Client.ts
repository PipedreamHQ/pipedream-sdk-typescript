/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments.js";
import * as core from "./core/index.js";
import * as Pipedream from "./api/index.js";
import { OauthTokens } from "./api/resources/oauthTokens/client/Client.js";
import { mergeHeaders } from "./core/headers.js";
import { AppCategories } from "./api/resources/appCategories/client/Client.js";
import { Apps } from "./api/resources/apps/client/Client.js";
import { Accounts } from "./api/resources/accounts/client/Client.js";
import { Users } from "./api/resources/users/client/Client.js";
import { Components } from "./api/resources/components/client/Client.js";
import { Actions } from "./api/resources/actions/client/Client.js";
import { Triggers } from "./api/resources/triggers/client/Client.js";
import { DeployedTriggers } from "./api/resources/deployedTriggers/client/Client.js";
import { Projects } from "./api/resources/projects/client/Client.js";
import { Proxy } from "./api/resources/proxy/client/Client.js";
import { Tokens } from "./api/resources/tokens/client/Client.js";

export declare namespace PipedreamClient {
    export interface Options {
        environment?: core.Supplier<environments.PipedreamEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        clientId?: core.Supplier<string>;
        clientSecret?: core.Supplier<string>;
        tokenProvider?: core.TokenProvider;
        projectId: string;
        /** Override the x-pd-environment header */
        projectEnvironment?: core.Supplier<Pipedream.ProjectEnvironment | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the x-pd-environment header */
        projectEnvironment?: Pipedream.ProjectEnvironment | undefined;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class PipedreamClient {
    protected readonly _options: PipedreamClient.Options;
    protected readonly _tokenProvider: core.TokenProvider;
    protected _appCategories: AppCategories | undefined;
    protected _apps: Apps | undefined;
    protected _accounts: Accounts | undefined;
    protected _users: Users | undefined;
    protected _components: Components | undefined;
    protected _actions: Actions | undefined;
    protected _triggers: Triggers | undefined;
    protected _deployedTriggers: DeployedTriggers | undefined;
    protected _projects: Projects | undefined;
    protected _proxy: Proxy | undefined;
    protected _tokens: Tokens | undefined;
    protected _oauthTokens: OauthTokens | undefined;

    constructor(_options: PipedreamClient.Options) {
        this._options = {
            ..._options,
            headers: mergeHeaders(
                {
                    "x-pd-environment": _options?.projectEnvironment,
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@pipedream/sdk",
                    "X-Fern-SDK-Version": "2.0.0-rc.11",
                    "User-Agent": "@pipedream/sdk/2.0.0-rc.11",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                },
                _options?.headers,
            ),
        };

        this._tokenProvider = this._options.tokenProvider ?? this.newOAuthTokenProvider();
    }

    private newOAuthTokenProvider(): core.OAuthTokenProvider {
        const clientId = this._options.clientId ?? process.env["PIPEDREAM_CLIENT_ID"];
        if (clientId == null) {
            throw new Error(
                "clientId is required; either pass it as an argument or set the PIPEDREAM_CLIENT_ID environment variable",
            );
        }

        const clientSecret = this._options.clientSecret ?? process.env["PIPEDREAM_CLIENT_SECRET"];
        if (clientSecret == null) {
            throw new Error(
                "clientSecret is required; either pass it as an argument or set the PIPEDREAM_CLIENT_SECRET environment variable",
            );
        }

        return new core.OAuthTokenProvider({
            clientId,
            clientSecret,
            authClient: new OauthTokens({
                ...this._options,
                environment: this._options.environment,
            }),
        });
    }

    public get appCategories(): AppCategories {
        return (this._appCategories ??= new AppCategories({
            ...this._options,
            token: async () => await this._tokenProvider.getToken(),
        }));
    }

    public get apps(): Apps {
        return (this._apps ??= new Apps({
            ...this._options,
            token: async () => await this._tokenProvider.getToken(),
        }));
    }

    public get accounts(): Accounts {
        return (this._accounts ??= new Accounts({
            ...this._options,
            token: async () => await this._tokenProvider.getToken(),
        }));
    }

    public get users(): Users {
        return (this._users ??= new Users({
            ...this._options,
            token: async () => await this._tokenProvider.getToken(),
        }));
    }

    public get components(): Components {
        return (this._components ??= new Components({
            ...this._options,
            token: async () => await this._tokenProvider.getToken(),
        }));
    }

    public get actions(): Actions {
        return (this._actions ??= new Actions({
            ...this._options,
            token: async () => await this._tokenProvider.getToken(),
        }));
    }

    public get triggers(): Triggers {
        return (this._triggers ??= new Triggers({
            ...this._options,
            token: async () => await this._tokenProvider.getToken(),
        }));
    }

    public get deployedTriggers(): DeployedTriggers {
        return (this._deployedTriggers ??= new DeployedTriggers({
            ...this._options,
            token: async () => await this._tokenProvider.getToken(),
        }));
    }

    public get projects(): Projects {
        return (this._projects ??= new Projects({
            ...this._options,
            token: async () => await this._tokenProvider.getToken(),
        }));
    }

    public get proxy(): Proxy {
        return (this._proxy ??= new Proxy({
            ...this._options,
            token: async () => await this._tokenProvider.getToken(),
        }));
    }

    public get tokens(): Tokens {
        return (this._tokens ??= new Tokens({
            ...this._options,
            token: async () => await this._tokenProvider.getToken(),
        }));
    }

    public get oauthTokens(): OauthTokens {
        return (this._oauthTokens ??= new OauthTokens({
            ...this._options,
            token: async () => await this._tokenProvider.getToken(),
        }));
    }
}
