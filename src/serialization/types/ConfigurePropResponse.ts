/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index.js";
import * as Pipedream from "../../api/index.js";
import * as core from "../../core/index.js";
import { PropOption } from "./PropOption.js";

export const ConfigurePropResponse: core.serialization.ObjectSchema<
    serializers.ConfigurePropResponse.Raw,
    Pipedream.ConfigurePropResponse
> = core.serialization.object({
    options: core.serialization.list(PropOption).optional(),
    stringOptions: core.serialization.property(
        "string_options",
        core.serialization.list(core.serialization.string()).optional(),
    ),
    observations: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
    asyncHandle: core.serialization.property("async_handle", core.serialization.string().optional()),
    context: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
    errors: core.serialization.list(core.serialization.string()).optional(),
});

export declare namespace ConfigurePropResponse {
    export interface Raw {
        options?: PropOption.Raw[] | null;
        string_options?: string[] | null;
        observations?: Record<string, unknown> | null;
        async_handle?: string | null;
        context?: Record<string, unknown> | null;
        errors?: string[] | null;
    }
}
